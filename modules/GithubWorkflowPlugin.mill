package build.modules

import mill.*
import mill.api.BuildCtx
import mill.scalalib.*

trait GithubWorkflowPlugin extends ScalaModule {
  def moduleName: String
  def isComponent: Boolean
  def test: ScalaTests
  private def depNames = this.moduleDeps.map(_.moduleDir.baseName) ++ test
    .moduleDeps
    .map(_.moduleDir.baseName)
    .filterNot(_ == "test")
  private def ciWorkflowPath        = BuildCtx.workspaceRoot / ".github" / "workflows" / s"${moduleName}_ci.yml"
  private def ciReleaseWorkflowPath = BuildCtx.workspaceRoot / ".github" / "workflows" / s"${moduleName}_release.yml"

  def ghGenerate(): Task.Command[Unit] = Task.Command {
    os.write.over(ciWorkflowPath, ci_workflow_yaml())
    if (isComponent) {
      os.write.over(ciReleaseWorkflowPath, release_workflow_yaml())
    }
  }

  val doNotEditHeader: String = s"""# AUTOGENERATED BY: modules/GithubWorkflowPlugin.scala (`./mill _.ghGenerate`)
       |# DO NOT EDIT MANUALLY.""".stripMargin

  def pathsFor(name: String): Seq[String] = {
    Seq(s"$name/**")
  }

  def sharedBuildFiles(): Seq[String] = Seq("modules/**", "build.mill")

  def getPaths(name: String, deps: Seq[String]): Seq[String] = {
    pathsFor(name) ++ deps.flatMap(pathsFor) ++ sharedBuildFiles()
  }

  def getPathsList(name: String, deps: Seq[String]): String = {
    val paths = getPaths(name, deps).distinct

    "\n" + paths.map(x => s"      - $x").mkString("\n")
  }

  private def release_workflow_yaml = Task {
    val paths = getPathsList(moduleName, depNames)
    s"""$doNotEditHeader
       |name: 'Release: $moduleName'
       |on:
       |  workflow_dispatch:
       |    inputs: { }
       |  push:
       |    branches:
       |      - master
       |    paths:$paths
       |jobs:
       |  release:
       |    uses: ndlano/reusable-workflows/.github/workflows/release.yaml@main
       |    secrets: inherit
       |    with:
       |      component: $moduleName
       |""".stripMargin

  }

  private def ci_workflow_yaml = Task {
    val paths = getPathsList(moduleName, depNames)
    s"""$doNotEditHeader
       |name: 'CI: $moduleName'
       |on:
       |  workflow_dispatch:
       |    inputs: { }
       |  push:
       |    paths:$paths
       |  pull_request:
       |    paths:$paths
       |jobs:
       |  unit_tests:
       |    uses: ./.github/workflows/ci.yaml
       |    secrets: inherit
       |    with:
       |      subproject: $moduleName
       |""".stripMargin
  }

}
