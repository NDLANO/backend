/*
 * Part of NDLA backend
 * Copyright (C) 2023 NDLA
 *
 * See LICENSE
 *
 */

import GithubWorkflowPlugin.autoImport.{ghGenerate, ghGenerateEnable, ghGenerateEnableRelease}
import sbt.*
import sbt.Keys.*

object GithubWorkflowPlugin extends AutoPlugin {
  object autoImport {
    val ghGenerateEnableRelease =
      settingKey[Boolean]("Whether or not to enable the release workflow for the component")
    val ghGenerateEnable = settingKey[Boolean]("Whether or not to enable the release workflow for the component")
    val ghGenerate: TaskKey[Unit] =
      taskKey[Unit]("Generate workflow yay")

  }

  def getSafeName(name: String): String = name.replaceAll("-", "")

  def pathsFor(name: String): Seq[String] = {
    val safeName = getSafeName(name)
    Seq(
      s"$name/**",
      s"project/$safeName*.scala"
    )
  }

  def getPaths(name: String, deps: Seq[String]): Seq[String] = {
    pathsFor(name) ++
      deps.flatMap(pathsFor) ++
      Seq(
        s"project/Dependencies.scala",
        s"project/Module.scala"
      )
  }

  def getPathsList(name: String, deps: Seq[String]): String = {
    val paths = getPaths(name, deps)
    "\n" + paths
      .map(x => s"      - $x")
      .mkString("\n")
  }

  override lazy val projectSettings: Seq[Setting[?]] = Seq(
    ghGenerateEnable        := false,
    ghGenerateEnableRelease := false,
    ghGenerate := {
      if (ghGenerateEnable.value) {
        val appName = name.value

        val depNames            = projectDependencies.value.map(_.name)
        val ciYaml              = ci_workflow_yaml(appName, depNames)
        val ciWriteTarget: File = file(s".github/workflows/${appName}_ci.yml")
        IO.write(ciWriteTarget, ciYaml)

        if (ghGenerateEnableRelease.value) {
          val releaseYaml              = release_workflow_yaml(appName, depNames)
          val releaseWriteTarget: File = file(s".github/workflows/${appName}_release.yml")
          IO.write(releaseWriteTarget, releaseYaml)
        }
      }
    }
  )

  override def trigger: PluginTrigger                    = AllRequirements
  override def projectConfigurations: Seq[Configuration] = super.projectConfigurations

  val doNotEditHeader: String =
    s"""# AUTOGENERATED BY: project/GithubWorkflowPlugin.scala (sbt `ghGenerate`)
       |# DO NOT EDIT MANUALLY.""".stripMargin

  def release_workflow_yaml(name: String, depNames: Seq[String]): String = {
    val safeName = getSafeName(name)
    val paths    = getPathsList(name, depNames)
    s"""$doNotEditHeader
       |name: 'Release: $name'
       |on:
       |  workflow_dispatch:
       |    inputs: { }
       |  push:
       |    branches:
       |      - master
       |    paths:$paths
       |jobs:
       |  release:
       |    uses: ndlano/reusable-workflows/.github/workflows/release.yaml@main
       |    secrets: inherit
       |    with:
       |      component: $name
       |""".stripMargin

  }

  def ci_workflow_yaml(name: String, depNames: Seq[String]): String = {
    val safeName = getSafeName(name)
    val paths    = getPathsList(name, depNames)
    s"""$doNotEditHeader
      |name: 'CI: $name'
      |on:
      |  workflow_dispatch:
      |    inputs: { }
      |  push:
      |    paths:$paths
      |  pull_request:
      |    paths:$paths
      |jobs:
      |  unit_tests:
      |    uses: ./.github/workflows/ci.yaml
      |    secrets: inherit
      |    with:
      |      subproject: $name
      |""".stripMargin
  }

}
