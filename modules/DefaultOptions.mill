package build.modules

import mill.*
import mill.scalalib.*

trait DefaultOptions extends ScalaModule {

  type VersionCheckFunc = String => Boolean
  private def scala2: VersionCheckFunc     = version => version.startsWith("2.")
  private def scala3: VersionCheckFunc     = version => version.startsWith("3.")
  private def scala3and2: VersionCheckFunc = version => scala2(version) && scala3(version)

  case class NDLAScalaOption(name: String, versionCheck: VersionCheckFunc = _ => true)

  given Conversion[String, NDLAScalaOption] =
    name => NDLAScalaOption(name, _ => true)
  given Conversion[(String, VersionCheckFunc), NDLAScalaOption] =
    (name, versionCheck) => NDLAScalaOption(name, versionCheck)

  def sharedScalacOptions: T[Seq[String]] = Task {
    Seq[NDLAScalaOption](
      "-encoding",
      "utf8",
      "-feature",
      "-unchecked",
      "-language:existentials",
      "-language:experimental.macros",
      "-language:higherKinds",
      "-language:implicitConversions",
      "-Xfatal-warnings",
      "-Xlint:adapted-args"           -> scala2,
      "-Xlint:constant"               -> scala2,
      "-Xlint:delayedinit-select"     -> scala2,
      "-Xlint:deprecation"            -> scala2,
      "-Xlint:doc-detached"           -> scala2,
      "-Xlint:implicit-recursion"     -> scala2,
      "-Xlint:implicit-not-found"     -> scala2,
      "-Xlint:inaccessible"           -> scala2,
      "-Xlint:infer-any"              -> scala2,
      "-Xlint:missing-interpolator"   -> scala2,
      "-Xlint:nullary-unit"           -> scala2,
      "-Xlint:option-implicit"        -> scala2,
      "-Xlint:package-object-classes" -> scala2,
      "-Xlint:poly-implicit-overload" -> scala2,
      "-Xlint:private-shadow"         -> scala2,
      "-Xlint:stars-align"            -> scala2,
      "-Xlint:strict-unsealed-patmat" -> scala2,
      "-Xlint:type-parameter-shadow"  -> scala2,
      "-Xlint:-byname-implicit"       -> scala2,
      "-Wextra-implicit"              -> scala2,
      "-Wnumeric-widen"               -> scala2,
      "-Xsource:3"                    -> scala2,
      "-Yrangepos"                    -> scala2,
      "-Wunused:nowarn",
      "-Wunused:implicits",
      "-Wunused:explicits",
      "-Wunused:imports",
      "-Wunused:locals",
      "-Wunused:params",
      "-Wunused:patvars",
      "-Wunused:privates",
      "-Wconf:src=src_managed/.*:silent"
    ).filter(_.versionCheck(scalaVersion())).map(_.name)
  }

  def scalacOptionsOnlyRun: T[Seq[String]] = Task {
    Seq[NDLAScalaOption](
      "-Wdead-code" -> scala2,
      "-Wvalue-discard",
      "-Wnonunit-statement"
    ).filter(_.versionCheck(scalaVersion())).map(_.name)
  }

  def testJavaOptions: T[Seq[String]] = Task {
    Seq[NDLAScalaOption](
      "-XX:+EnableDynamicAgentLoading",
      "-Xshare:off"
    ).filter(_.versionCheck(scalaVersion())).map(_.name)
  }
}
