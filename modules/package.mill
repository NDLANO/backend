package build.modules

import mill.*
import mill.api.BuildCtx
import mill.scalalib.*
import os.Path
import scala.util.{Failure, Success, Try}
import scala.io.Source

trait BaseModule
    extends ScalaModule,
      DefaultOptions,
      AutoEnvLoading,
      OpenAPITSPlugin,
      GithubWorkflowPlugin,
      CopyrightHeaderPlugin {
  def moduleName: String
  def scalaVersion: T[String] = SharedDependencies.ScalaVersion
  private val baseModuleDir   = super.moduleDir

  override def scalacOptions: T[Seq[String]] = super.scalacOptions() ++ sharedScalacOptions ++ scalacOptionsOnlyRun
  override def sources: T[Seq[PathRef]]      = Task.Sources("src/main/scala", "src/main/scala-2")
  override def resources: T[Seq[PathRef]]    = Task.Sources(
    "src/main/resources",
    BuildCtx.workspaceRoot / "log4j" / "main"
  )

  trait TestBase extends ScalaTests, TestModule.ScalaTest {
    override def moduleDir: Path             = baseModuleDir
    override def scalaTestVersion: T[String] = SharedDependencies.ScalaTestV
    override def mvnDeps: T[Seq[Dep]]        = super.mvnDeps() ++ SharedDependencies.testing
    override def sources: T[Seq[PathRef]]    = Task.Sources("src/test/scala", "src/test/scala-2")
    override def resources: T[Seq[PathRef]]  = Task.Sources(
      "src/test/resources",
      BuildCtx.workspaceRoot / "log4j" / "test"
    )
    override def scalacOptions: T[Seq[String]] = super.scalacOptions().filterNot(scalacOptionsOnlyRun.contains)
    override def forkArgs: T[Seq[String]]      = super.forkArgs() ++ testJavaOptions
  }

}
